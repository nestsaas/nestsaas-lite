// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                Int      @id @default(autoincrement())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id                  Int                  @id @default(autoincrement())
  name                String? // display name
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  lastLogin           DateTime?            @map("last_login")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  role                UserRole             @default(USER)
  website             String?
  accounts            Account[]
  sessions            Session[]
  Media               Media[]
  purchases           Purchase[]
  subscription        Subscription?

  stripeCustomerId    String?   @unique
  credits             Int       @default(3)
  
  // Deprecated: use Subscription model instead
  // stripeSubscriptionId   String?   @unique
  // stripePriceId          String?
  // stripeCurrentPeriodEnd DateTime?

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map(name: "verification_tokens")
}

enum StorageProvider {
  LOCAL
  S3
  R2
}

model Media {
  id              Int             @id @default(autoincrement())
  fileName        String
  mimeType        String // Consider adding a check constraint for image MIME types
  fileSize        Int
  width           Int? // For images
  height          Int? // For images
  url             String
  storageProvider StorageProvider @default(LOCAL)
  storageKey      String
  title           String?
  blurhash        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          Int?
  user            User?           @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([mimeType])
  @@index([createdAt])
  @@map(name: "medias")
}

// Waitlist or newsletter subscribers
enum AudienceStatus {
  SUBSCRIBED
  UNSUBSCRIBED
}

model Audience {
  id        Int              @id @default(autoincrement())
  email     String           @unique
  status    AudienceStatus @default(SUBSCRIBED)
  source    String?          @default("website")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([email])
  @@index([status])
  @@map(name: "audiences")
}

// One-time purchase related models
enum PurchaseStatus {
  PENDING // Pending
  COMPLETED // Completed
  FAILED // Failed
  REFUNDED // Refunded
}

model Purchase {
  id          String         @id @default(cuid())
  product     String         @default("")
  amount      Decimal        @db.Decimal(10, 2)
  currency    String         @default("USD")
  description String?
  status      PurchaseStatus @default(PENDING)
  metadata    Json? // Store additional information

  // Payment related
  stripePaymentIntentId String? @unique
  stripePriceId         String?
  stripeSessionId       String? @unique

  // Time related
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // User association
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([product])
  @@index([status])
  @@index([createdAt])
  @@map(name: "purchases")
}


enum SubscriptionStatus {
  pending
  active
  canceled
  past_due
  unpaid
  incomplete
  incomplete_expired
  trialing
}

model Subscription {
  id                   String  @id @default(cuid())
  stripeCustomerId     String  @unique
  stripeSubscriptionId String  // Stripe subscription ID
  stripePriceId        String
  interval             String  @default("")

  // stripe status Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, unpaid, or paused
  status             String
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean
  extra              Json? 

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  userId               Int     @unique
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([stripePriceId])
  @@map(name: "subscriptions")
}
